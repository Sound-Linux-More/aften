# CMake project file by Prakash Punnoor
CMAKE_MINIMUM_REQUIRED(VERSION 2.4)

SET(CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}/CMakeModules")
Project(Aften C)

SET(SO_MAJOR_VERSION "0")
SET(SO_MINOR_VERSION "0")
SET(SO_BUILD_VERSION "5")
SET(SO_VERSION "${SO_MAJOR_VERSION}.${SO_MINOR_VERSION}.${SO_BUILD_VERSION}")

IF(${Aften_SOURCE_DIR} MATCHES ${Aften_BINARY_DIR})
  MESSAGE("Please do an out-of-tree build:")
  MESSAGE("rm -f CMakeCache.txt; mkdir -p default; cd default; cmake ..; make")
  MESSAGE(FATAL_ERROR "in-tree-build detected")
ENDIF(${Aften_SOURCE_DIR} MATCHES ${Aften_BINARY_DIR})

INCLUDE(${CMAKE_ROOT}/Modules/TestBigEndian.cmake)
INCLUDE(${CMAKE_ROOT}/Modules/CheckCSourceCompiles.cmake)
INCLUDE(${CMAKE_MODULE_PATH}/ConfigHelper.cmake)
INCLUDE(${CMAKE_MODULE_PATH}/HeaderTests.cmake)
INCLUDE(${CMAKE_MODULE_PATH}/FlagsTests.cmake)
INCLUDE(${CMAKE_MODULE_PATH}/CompilerVisibility.cmake)
INCLUDE(${CMAKE_MODULE_PATH}/CompilerSIMD.cmake)
INCLUDE(${CMAKE_MODULE_PATH}/DetectCompiler.cmake)

OPTION(DOUBLE "build Aften with doubles instead of floats" OFF)
IF(DOUBLE)
  ADD_DEFINE(CONFIG_DOUBLE)
ENDIF(DOUBLE)

INCLUDE_DIRECTORIES(${Aften_SOURCE_DIR}/)
INCLUDE_DIRECTORIES(${Aften_SOURCE_DIR}/libaften)
INCLUDE_DIRECTORIES(${Aften_SOURCE_DIR}/aften)

SET(LIBAFTEN_SRCS libaften/a52enc.c
                  libaften/bitalloc.c
                  libaften/bitio.c
                  libaften/crc.c
                  libaften/dynrng.c
                  libaften/window.c
                  libaften/mdct.c
                  libaften/exponent.c
                  libaften/filter.c
                  libaften/util.c)

SET(LIBAFTEN_X86_SRCS libaften/x86/x86_cpu_caps.c)

SET(LIBAFTEN_X86_32_SRCS libaften/x86/x86_cpu_caps_detect.nasm)

SET(LIBAFTEN_X86_64_SRCS libaften/x86/x86_64_linux_cpu_caps_detect.yasm)

SET(LIBAFTEN_X86_SSE_SRCS libaften/x86/x86_sse_mdct_dummy.c)

SET(LIBAFTEN_X86_SSE3_SRCS libaften/x86/x86_sse3_mdct_dummy.c)

SET(AFTEN_SRCS aften/aften.c)


IF(CMAKE_UNAME)
  EXEC_PROGRAM(uname ARGS -m OUTPUT_VARIABLE CMAKE_SYSTEM_MACHINE)
ELSE(CMAKE_UNAME)
  MESSAGE("Could not detect machine type")
  IF(CMAKE_SYSTEM MATCHES "Windows")
    MESSAGE(STATUS "Assuming i386 machine")
    SET(CMAKE_SYSTEM_MACHINE i386)
  ENDIF(CMAKE_SYSTEM MATCHES "Windows")
ENDIF(CMAKE_UNAME)

DETECT_COMPILER()

CHECK_64BITS()

IF(CMAKE_COMPILER_IS_GNUCC)
  SET(CMAKE_C_FLAGS_RELEASE "-funroll-loops -fomit-frame-pointer ${CMAKE_C_FLAGS_RELEASE}")
  SET(ADD_CFLAGS "-pedantic -Wall -Wpointer-arith -Wredundant-decls -Wformat -Wunused ${ADD_CFLAGS}")

  # gcc 2.9.5 doesn't know following
  CHECK_CFLAGS_APPEND(ADD_CFLAGS "-std=gnu99")
  CHECK_CFLAGS_APPEND(ADD_CFLAGS "-Wdisabled-optimization")
  CHECK_CFLAGS_APPEND(ADD_CFLAGS "-Wfloat-equal")
  CHECK_CFLAGS_APPEND(ADD_CFLAGS "-Wbad-function-cast")

  # gcc 3.0 doesn't know following
  CHECK_CFLAGS_APPEND(ADD_CFLAGS "-Wdeclaration-after-statement")
  CHECK_CFLAGS_APPEND(ADD_CFLAGS "-Wextra")
  CHECK_CFLAGS_APPEND(ADD_CFLAGS "-Wno-switch")
ENDIF(CMAKE_COMPILER_IS_GNUCC)

IF(CMAKE_COMPILER_IS_ICC)
  # icc ignores bogus options, so detection makes no sense
  SET(CMAKE_C_FLAGS_RELEASE "-O3 -funroll-loops -fomit-frame-pointer ${CMAKE_C_FLAGS_RELEASE}")
  SET(ADD_CFLAGS "-std=c99 -Wall ${ADD_CFLAGS}")
ENDIF(CMAKE_COMPILER_IS_ICC)

IF(MSVC)
  # msvc ignores bogus options, so detection makes no sense
  SET(CMAKE_C_FLAGS_RELEASE "/Ot /Oy /Oi /Ox ${CMAKE_C_FLAGS_RELEASE}")
  ADD_DEFINITIONS(-D_CRT_SECURE_NO_DEPRECATE)
ENDIF(MSVC)

IF(CMAKE_BUILD_TYPE MATCHES "")
  SET(CMAKE_BUILD_TYPE "Release")
ENDIF(CMAKE_BUILD_TYPE MATCHES "")

IF(UNIX)
  SET(LIBM "m")
ENDIF(UNIX)

TEST_BIG_ENDIAN(CMAKE_WORDS_BIGENDIAN)

IF(CMAKE_WORDS_BIGENDIAN)
  ADD_DEFINE(WORDS_BIGENDIAN)
ENDIF(CMAKE_WORDS_BIGENDIAN)

TEST_COMPILER_VISIBILITY()
ADD_DEFINITIONS(-DAFTEN_BUILD_LIBRARY)

CHECK_INCLUDE_FILE_DEFINE(inttypes.h HAVE_INTTYPES_H)
CHECK_INCLUDE_FILE_DEFINE(byteswap.h HAVE_BYTESWAP_H)
SET(CMAKE_REQUIRED_LIBRARIES ${LIBM})
CHECK_C_SOURCE_COMPILES(
"#include <math.h>
int main() {volatile double f=1.0;exp10(f);}
" HAVE_EXP10)
SET(CMAKE_REQUIRED_LIBRARIES "")

# do SIMD stuff
IF(NOT DOUBLE)
IF(CMAKE_SYSTEM_MACHINE MATCHES "i.86" OR CMAKE_SYSTEM_MACHINE MATCHES "x86_64")
  CHECK_SSE()
  CHECK_SSE3()

  IF(MSVC)
    IF(HAVE_SSE)
      ADD_DEFINITIONS(-D__SSE__)
    ENDIF(HAVE_SSE)
    IF(HAVE_SSE3)
      ADD_DEFINITIONS(-D__SSE3__)
    ENDIF(HAVE_SSE3)
  ENDIF(MSVC)

  IF(HAVE_SSE OR HAVE_SSE3)
    INCLUDE_DIRECTORIES(${Aften_SOURCE_DIR}/libaften/x86)
    SET(LIBAFTEN_SRCS ${LIBAFTEN_SRCS} ${LIBAFTEN_X86_SRCS})

    IF(HAVE_SSE)
      SET(LIBAFTEN_SRCS ${LIBAFTEN_SRCS} ${LIBAFTEN_X86_SSE_SRCS})
      FOREACH(SRC ${LIBAFTEN_X86_SSE_SRCS})
        SET_SOURCE_FILES_PROPERTIES(${SRC} PROPERTIES COMPILE_FLAGS "${SSE_FLAGS} -DUSE_SSE")
      ENDFOREACH(SRC)
      ADD_DEFINE(HAVE_SSE)

      CHECK_MM_MALLOC()
    ENDIF(HAVE_SSE)

    IF(HAVE_SSE3)
      SET(LIBAFTEN_SRCS ${LIBAFTEN_SRCS} ${LIBAFTEN_X86_SSE3_SRCS})
      FOREACH(SRC ${LIBAFTEN_X86_SSE3_SRCS})
        SET_SOURCE_FILES_PROPERTIES(${SRC} PROPERTIES COMPILE_FLAGS "${SSE3_FLAGS} -DUSE_SSE3")
      ENDFOREACH(SRC)
      ADD_DEFINE(HAVE_SSE3)

      CHECK_CASTSI128()
    ENDIF(HAVE_SSE3)

    IF(CMAKE_SYSTEM_MACHINE MATCHES "i.86" OR UNIX)
      FIND_PROGRAM(HAVE_NASM NAMES yasm nasm)

      IF(HAVE_NASM MATCHES "NOTFOUND")
          IF(CMAKE_SYSTEM_MACHINE MATCHES "x86_64" AND NOT HAVE_SSE3)
            MESSAGE("It's safe for you to not detect SSE, as x86_64 will have it.")
          ELSE(CMAKE_SYSTEM_MACHINE MATCHES "x86_64" AND NOT HAVE_SSE3)

            MESSAGE(FATAL_ERROR "Neither yasm nor nasm found - needed for SIMD detection")
          ENDIF(CMAKE_SYSTEM_MACHINE MATCHES "x86_64" AND NOT HAVE_SSE3)
      ELSE(HAVE_NASM MATCHES "NOTFOUND")

        PROJECT(Aften ASM)
        MESSAGE(STATUS "Using YASM/NASM")
        ADD_DEFINE(HAVE_CPU_CAPS_DETECTION)

        IF(CMAKE_SYSTEM_MACHINE MATCHES "x86_64")
          SET(LIBAFTEN_SRCS ${LIBAFTEN_SRCS} ${LIBAFTEN_X86_64_SRCS})
        ELSE(CMAKE_SYSTEM_MACHINE MATCHES "x86_64")

          SET(LIBAFTEN_SRCS ${LIBAFTEN_SRCS} ${LIBAFTEN_X86_32_SRCS})
        ENDIF(CMAKE_SYSTEM_MACHINE MATCHES "x86_64")

        TEST_NASM_COMPILER_VISIBILITY()

      ENDIF(HAVE_NASM MATCHES "NOTFOUND")
    ENDIF(CMAKE_SYSTEM_MACHINE MATCHES "i.86" OR UNIX)
  ENDIF(HAVE_SSE OR HAVE_SSE3)
ENDIF(CMAKE_SYSTEM_MACHINE MATCHES "i.86" OR CMAKE_SYSTEM_MACHINE MATCHES "x86_64")
ENDIF(NOT DOUBLE)


GENERATE_CONFIG_H()

SET(CMAKE_C_FLAGS "${ADD_CFLAGS} ${CMAKE_C_FLAGS}")

ADD_LIBRARY(aften SHARED ${LIBAFTEN_SRCS})
SET_TARGET_PROPERTIES(aften PROPERTIES VERSION ${SO_VERSION} SOVERSION ${SO_MAJOR_VERSION})
SET_TARGET_PROPERTIES(aften PROPERTIES LINKER_LANGUAGE C)
TARGET_LINK_LIBRARIES(aften ${LIBM})

ADD_LIBRARY(aften_static STATIC ${LIBAFTEN_SRCS})
#SET_TARGET_PROPERTIES(aften_static PROPERTIES OUTPUT_NAME aften)
SET_TARGET_PROPERTIES(aften_static PROPERTIES LINKER_LANGUAGE C)
TARGET_LINK_LIBRARIES(aften_static ${LIBM})

# building a static lib to prevent recompilation of wav.c
ADD_LIBRARY(aften_wav STATIC aften/wav.c)

ADD_EXECUTABLE(aften_exe ${AFTEN_SRCS})
SET_TARGET_PROPERTIES(aften_exe PROPERTIES OUTPUT_NAME aften)
SET_TARGET_PROPERTIES(aften_exe PROPERTIES LINKER_LANGUAGE C)
TARGET_LINK_LIBRARIES(aften_exe aften_wav aften_static)

ADD_EXECUTABLE(wavinfo util/wavinfo.c)
TARGET_LINK_LIBRARIES(wavinfo aften_wav)

ADD_EXECUTABLE(wavrms util/wavrms.c)
TARGET_LINK_LIBRARIES(wavrms aften_wav ${LIBM})

ADD_EXECUTABLE(wavfilter util/wavinfo.c libaften/filter.c)
TARGET_LINK_LIBRARIES(wavfilter aften_wav ${LIBM})

INSTALL(TARGETS aften aften_exe wavinfo wavrms wavfilter
        RUNTIME DESTINATION bin
        LIBRARY DESTINATION lib
        ARCHIVE DESTINATION lib)
